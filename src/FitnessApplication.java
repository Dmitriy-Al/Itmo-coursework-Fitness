
public class FitnessApplication {
    public static void main(String[] args) {

        // форма заполнения абонемента(тип абонемента <разовый, дневной, полный>, срок действия <дней>, год рождения клиента, имя, фамилия)
        // осуществляются проверки: разовый абонемент независимо от введённого числа - всегда на один день
        // клиент не может быть старше 100 и младше 10 лет (эйджизм)
        // имя и фамилия не могут быть короче двух символов
        PassTicket client0 = new PassTicket(PassTicketCategory.ONETIME, 1, 2007, "Однораз", "Абонементов");
        PassTicket client1 = new PassTicket(PassTicketCategory.DAYTIME, 10, 1998, "Днев", "Абон");
        PassTicket client2 = new PassTicket(PassTicketCategory.FULLTIME, 3, 1991, "Пол", "Аб");

        Fitness fitness = new Fitness();

        PassTicket[] gymZone = {client0, client1, client2, client1, client2};  // массив клиентов, желающие попасть в тренажёрный зал. В очередях во все три зоны клиентов может быть больше 20, но пройдут только 20
        PassTicket[] poolZone = {client2, client1, client2, client0, client0};  // массив клиентов, желающие попасть в бассейн
        PassTicket[] groupZone = {client1, client2, client0, client0, client1};  // массив клиентов, желающие попасть на групповые тренировки


        // В метод передаются (int количество дней работы, массив абонентов фитнес зоны, бассейна, групповых занятий)
        fitness.startFitnessWorkingDays(4, gymZone, poolZone, groupZone);  // TODO: God Object:) метод для имитации многодневной работы фитнес-клуба


        // В метод передаются (массив абонентов фитнес зоны, бассейна, групповых занятий)
//        fitness.oneFitnessWorkingDay(gymZone, poolZone, groupZone);  // TODO: метод для имитации одного дня работы фитнес-клуба


    }
}
// Задача «Фитнес»
//В фитнес клубе есть три типа абонементов:
//
//Разовый (на один день). По разовому абонементу клиенты могут посещать бассейн и тренажерный зал с 8 до 22 часов.
//Дневной (срок действия может быть любым). По данному абонементу клиенты могут посещать тренажерный зал и групповые
// занятия (но не бассейн) с 8 до 16 часов.
//Полный (срок действия может быть любым). По данному абонементу клиенты могут посещать тренажерный зал, бассейн и групповые занятия с 8 до 22 часов.
//Каждый абонемент хранит дату регистрации (текущая дата) и дату окончания регистрации. Каждый абонемент хранит информацию о владельце. Данные о владельце: имя, фамилия, год рождения.
//
//Фитнес содержит информацию об абонементах, которые:
//
//зарегистрированы в тренажерном зале (массив абонементов);
//зарегистрированы в бассейне (массив абонементов);
//зарегистрированы на групповых занятиях (массив абонементов).
//В каждой зоне (бассейн, тренажерный зал, групповые занятия) одновременно может быть зарегистрировано 20 абонементов.
//
//Когда фитнес клуб закрывается, клиенты покидают его (заполнить массив null элементами).
//
//Когда клиент приходит в фитнес клуб, он сообщает желаемую зону и показывает абонемент. Поэтому перед добавлением в один
// из массивов, необходимо проверить можно ли по данному абонементу пройти в желаемую зону, если посетитель не может пройти, необходимо сообщить ему причину.
//
//Посетитель не может пройти:
//
//если абонемент просрочен,
//если он пытается пройти в зону, которая не разрешена по его абонементу,
//если в зоне нет свободных мест.
//Абонемент не может быть зарегистрирован одновременно в нескольких зонах (можно не реализовывать).
//
//Реализовать возможность вывода информации о посетителях: сначала посетителях тренажерного зала, потом бассейна, потом групповых занятий.
//
//Реализовать возможность выводить информацию в консоль каждый раз, когда абонемент регистрируется в одной из зон (добавляется в массив). Информация для вывода:
//
//Фамилия Имя Посещаемая зона (бассейн/тренажерный зал/групповые занятия)
//Дата и время посещения
//Не нужно реализовывать ввод данных с консоли. Экземпляры классов (данные о владельце, абонемент, фитнес) создать в методе main отдельного класса (например, Application).